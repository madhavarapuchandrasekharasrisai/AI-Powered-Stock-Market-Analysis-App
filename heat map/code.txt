import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from streamlit_autorefresh import st_autorefresh
import yfinance as yf


# Cache sector data for a week to minimize API calls
@st.cache_data(ttl=604800)
def get_sector_data_yfinance(symbols):
    """
    Fetches sector data for a list of stock symbols using yfinance.
    """
    sector_map = {}
    tickers = yf.Tickers(symbols)
    for symbol in symbols:
        try:
            ticker_info = tickers.tickers[symbol].info
            if 'sector' in ticker_info:
                sector_map[symbol] = ticker_info['sector']
            elif 'industry' in ticker_info:
                sector_map[symbol] = ticker_info['industry']
            else:
                sector_map[symbol] = 'Unknown'
        except Exception:
            sector_map[symbol] = 'Unknown'
    return sector_map


@st.cache_data(ttl=300)
def get_index_details(category):
    """
    Fetches constituents and price data for indices from NSE.
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36',
        'Upgrade-Insecure-Requests': "1",
        "DNT": "1",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*,q=0.8",
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive'
    }
    category = category.upper().replace('&', '%26').replace(' ', '%20')

    try:
        ref_url = f"https://www.nseindia.com/market-data/live-equity-market?symbol={category}"
        ref = requests.get(ref_url, headers=headers, timeout=5)
        url = f"https://www.nseindia.com/api/equity-stockIndices?index={category}"
        data = requests.get(url, headers=headers, cookies=ref.cookies.get_dict(), timeout=5).json()
        df = pd.DataFrame(data['data'])
        if not df.empty:
            df = df.drop(["meta"], axis=1)
            df = df.set_index("symbol", drop=True)
            df['ffmc'] = round(df['ffmc'] / 10000000, 0)
            df = df.iloc[1:].reset_index(drop=False)

            # Use a more consistent yfinance-compatible symbol
            df['yf_symbol'] = df['symbol'] + '.NS'

        return df
    except Exception as e:
        st.error("Error Fetching Index Data from NSE. Please try again.")
        return pd.DataFrame()


# Index list
index_list = ['NIFTY 50', 'NIFTY NEXT 50', 'NIFTY MIDCAP 50', 'NIFTY MIDCAP 100', 'NIFTY MIDCAP 150',
              'NIFTY SMALLCAP 50', 'NIFTY SMALLCAP 100', 'NIFTY SMALLCAP 250', 'NIFTY MIDSMALLCAP 400',
              'NIFTY 100', 'NIFTY 200', 'NIFTY AUTO', 'NIFTY BANK', 'NIFTY ENERGY',
              'NIFTY FINANCIAL SERVICES', 'NIFTY FINANCIAL SERVICES 25/50', 'NIFTY FMCG', 'NIFTY IT',
              'NIFTY MEDIA', 'NIFTY METAL', 'NIFTY PHARMA', 'NIFTY PSU BANK', 'NIFTY REALTY',
              'NIFTY PRIVATE BANK', 'Securities in F&O', 'Permitted to Trade', 'NIFTY DIVIDEND OPPORTUNITIES 50',
              'NIFTY50 VALUE 20', 'NIFTY100 QUALITY 30', 'NIFTY50 EQUAL WEIGHT', 'NIFTY100 EQUAL WEIGHT',
              'NIFTY100 LOW VOLATILITY 30', 'NIFTY ALPHA 50', 'NIFTY200 QUALITY 30',
              'NIFTY ALPHA LOW-VOLATILITY 30', 'NIFTY200 MOMENTUM 30', 'NIFTY COMMODITIES',
              'NIFTY INDIA CONSUMPTION', 'NIFTY CPSE', 'NIFTY INFRASTRUCTURE', 'NIFTY MNC',
              'NIFTY GROWTH SECTORS 15', 'NIFTY PSE', 'NIFTY SERVICES SECTOR', 'NIFTY100 LIQUID 15',
              'NIFTY MIDCAP LIQUID 15']

pd.set_option("display.max_rows", None, "display.max_columns", None)

# Page config
st.set_page_config(
    page_title='Advanced Market Analytics Dashboard - Indices Heatmap',
    layout="centered")

# üîÑ Auto-refresh every 5 minutes
st_autorefresh(interval=300000, key="auto_refresh")

# Style
st.markdown(
    f"""
    <style>
      .stAppViewContainer .stMain .stMainBlockContainer{{ max-width: 1440px; }}
    </style>    
  """,
    unsafe_allow_html=True,
)

# UI Layout
header1, header2 = st.columns([3, 1])
with header1:
    st.subheader("NSE Indices Heatmap - Visualizer")
    col1, col2, _ = st.columns([2, 1, 1])
    index_filter = col1.selectbox("Choose Index", index_list, index=0)
    slice_by = col2.selectbox("Slice By", ["Market Cap", "Gainers", "Losers"], index=0)

    search_query = st.text_input("Search a stock symbol", "")
    sort_by = st.selectbox("Sort By", ["pChange (High to Low)", "pChange (Low to High)", "ffmc (High to Low)",
                                       "ffmc (Low to High)"])

with header2:
    # Get index details first to get the list of symbols
    df = get_index_details(index_filter)

    # Get sector data for the symbols returned from the index details
    if not df.empty:
        sector_map = get_sector_data_yfinance(df['yf_symbol'].tolist())
        df['sector'] = df['yf_symbol'].map(sector_map)
        df.dropna(subset=['sector'], inplace=True)
        # Drop the temporary yf_symbol column
        df.drop('yf_symbol', axis=1, inplace=True)

    if not df.empty:
        # Filter by search query if provided
        if search_query:
            df = df[df['symbol'].str.contains(search_query.upper())]

        advances = df[df['pChange'] > 0].shape[0]
        declines = df[df['pChange'] < 0].shape[0]
        no_change = df[df['pChange'] == 0].shape[0]

        fig = px.pie(
            names=['Advances', 'Declines', 'No Change'],
            values=[advances, declines, no_change],
            color=['Advances', 'Declines', 'No Change'],
            color_discrete_sequence=['#3AA864', '#F38039', '#F2F2F2']
        )
        fig.update_traces(hole=0.7, textinfo='none')
        fig.update_layout(
            width=200, height=200, showlegend=False,
            annotations=[dict(
                text=f'A: {advances}<br>D: {declines}<br>N: {no_change}',
                x=0.5, y=0.5, font_size=14, showarrow=False
            )],
            margin=dict(l=0, r=0, t=0, b=0)
        )
        st.plotly_chart(fig)

if not df.empty:
    if slice_by == 'Market Cap':
        slice_factor = 'ffmc'
        color_scale = ['#ff7a3a', 'white', 'green']
    elif slice_by == 'Gainers':
        df = df[df["pChange"] > 0].copy()
        slice_factor = 'pChange'
        color_scale = ['white', '#a5eb79']
    elif slice_by == 'Losers':
        df = df[df["pChange"] < 0].copy()
        df['Abs'] = df['pChange'].abs()
        slice_factor = 'Abs'
        color_scale = ['#ff7a3a', 'white']

    st.divider()

    # Sorting logic
    if 'ffmc' in sort_by:
        df = df.sort_values(by='ffmc', ascending='Low' in sort_by)
    elif 'pChange' in sort_by:
        df = df.sort_values(by='pChange', ascending='Low' in sort_by)

    # Nested Treemap Path
    fig = px.treemap(
        df,
        path=['sector', 'symbol'],
        values=slice_factor,
        color='pChange',
        color_continuous_scale=color_scale,
        custom_data=['pChange']
    )

    fig.update_layout(
        margin=dict(t=30, l=0, r=0, b=0),
        height=900,
        paper_bgcolor="rgba(0, 0, 0, 0)",
        plot_bgcolor="rgba(0, 0, 0, 0)",
    )
    fig.update_traces(
        hovertemplate='<b>%{label}</b><br>Size: %{value}<br>pChange: %{customdata[0]:.2f}%',
        texttemplate='%{label}<br>%{customdata[0]:.2f}%',
        textposition='middle center',
        textinfo="label+value"
    )
    fig.update_coloraxes(showscale=False)
    st.plotly_chart(fig, use_container_width=True)

else:
    st.warning("Failed to fetch data or no stocks available for the selected index.")

st.write("")
st.write(":gray[Made with ‚ù§Ô∏è by YERRA SAI RAJESH]")         
















































import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from streamlit_autorefresh import st_autorefresh
import yfinance as yf
import os

# ---------------------- CACHING ----------------------
@st.cache_data(ttl=604800)
def get_sector_data_yfinance(symbols):
    """Fetch sector/industry data for stock symbols using yfinance."""
    sector_map = {}
    tickers = yf.Tickers(symbols)
    for symbol in symbols:
        try:
            ticker_info = tickers.tickers[symbol].info
            if 'sector' in ticker_info:
                sector_map[symbol] = ticker_info['sector']
            elif 'industry' in ticker_info:
                sector_map[symbol] = ticker_info['industry']
            else:
                sector_map[symbol] = 'Unknown'
        except Exception:
            sector_map[symbol] = 'Unknown'
    return sector_map


@st.cache_data(ttl=300)
def get_index_details(category):
    """Fetch index constituents + price data from NSE."""
    headers = {
        'User-Agent': 'Mozilla/5.0',
        "Accept": "application/json,text/html",
        'Accept-Language': 'en-US,en;q=0.9'
    }
    category = category.upper().replace('&', '%26').replace(' ', '%20')
    try:
        session = requests.Session()
        session.headers.update(headers)
        ref_url = f"https://www.nseindia.com/market-data/live-equity-market?symbol={category}"
        session.get(ref_url, timeout=5)  # warm-up
        url = f"https://www.nseindia.com/api/equity-stockIndices?index={category}"
        data = session.get(url, timeout=5).json()
        df = pd.DataFrame(data['data'])
        if not df.empty:
            df = df.drop(["meta"], axis=1)
            df = df.set_index("symbol", drop=True)
            df['ffmc'] = round(df['ffmc'] / 10000000, 0)
            df = df.iloc[1:].reset_index(drop=False)
            df['yf_symbol'] = df['symbol'] + '.NS'
        return df
    except Exception:
        return pd.DataFrame()

# ---------------------- CONFIG ----------------------
index_list = ['NIFTY 50', 'NIFTY NEXT 50', 'NIFTY MIDCAP 50', 'NIFTY MIDCAP 100', 'NIFTY MIDCAP 150',
              'NIFTY SMALLCAP 50', 'NIFTY SMALLCAP 100', 'NIFTY SMALLCAP 250', 'NIFTY MIDSMALLCAP 400',
              'NIFTY 100', 'NIFTY 200', 'NIFTY AUTO', 'NIFTY BANK', 'NIFTY ENERGY',
              'NIFTY FINANCIAL SERVICES', 'NIFTY FINANCIAL SERVICES 25/50', 'NIFTY FMCG', 'NIFTY IT',
              'NIFTY MEDIA', 'NIFTY METAL', 'NIFTY PHARMA', 'NIFTY PSU BANK', 'NIFTY REALTY',
              'NIFTY PRIVATE BANK', 'NIFTY DIVIDEND OPPORTUNITIES 50', 'NIFTY50 VALUE 20',
              'NIFTY100 QUALITY 30', 'NIFTY50 EQUAL WEIGHT', 'NIFTY100 EQUAL WEIGHT',
              'NIFTY100 LOW VOLATILITY 30', 'NIFTY ALPHA 50', 'NIFTY200 QUALITY 30',
              'NIFTY ALPHA LOW-VOLATILITY 30', 'NIFTY200 MOMENTUM 30', 'NIFTY COMMODITIES',
              'NIFTY INDIA CONSUMPTION', 'NIFTY CPSE', 'NIFTY INFRASTRUCTURE', 'NIFTY MNC',
              'NIFTY GROWTH SECTORS 15', 'NIFTY PSE', 'NIFTY SERVICES SECTOR', 'NIFTY100 LIQUID 15',
              'NIFTY MIDCAP LIQUID 15']

st.set_page_config(page_title='NSE Indices Heatmap Dashboard', layout="wide")
st_autorefresh(interval=300000, key="auto_refresh")

# ---------------------- UI ----------------------
st.title("üìä NSE Indices Heatmap Dashboard")

mode = st.radio("Mode", ["Single Index", "Multi Index Comparison"], horizontal=True)

if mode == "Single Index":
    col1, col2, _ = st.columns([2, 1, 1])
    index_filter = col1.selectbox("Choose Index", index_list, index=0)
    slice_by = col2.selectbox("Slice By", ["Market Cap", "Gainers", "Losers"], index=0)

    search_query = st.text_input("üîç Search a stock symbol", "")
    sort_by = st.selectbox("Sort By", [
        "pChange (High to Low)", "pChange (Low to High)",
        "ffmc (High to Low)", "ffmc (Low to High)"
    ])

    df = get_index_details(index_filter)

    if not df.empty:
        # Load or fetch sector data
        if os.path.exists("sector_map.csv"):
            sector_map = pd.read_csv("sector_map.csv", index_col=0).to_dict()["sector"]
        else:
            sector_map = get_sector_data_yfinance(df['yf_symbol'].tolist())
            pd.DataFrame.from_dict(sector_map, orient="index", columns=["sector"]).to_csv("sector_map.csv")

        df['sector'] = df['yf_symbol'].map(sector_map)
        df.dropna(subset=['sector'], inplace=True)
        df.drop('yf_symbol', axis=1, inplace=True)

        if search_query:
            df = df[df['symbol'].str.contains(search_query.upper())]

        # Slice logic
        if slice_by == 'Market Cap':
            slice_factor = 'ffmc'
            color_scale = px.colors.diverging.RdYlGn
        elif slice_by == 'Gainers':
            df = df[df["pChange"] > 0].copy()
            slice_factor = 'pChange'
            color_scale = ['white', '#a5eb79']
        elif slice_by == 'Losers':
            df = df[df["pChange"] < 0].copy()
            df['Abs'] = df['pChange'].abs()
            slice_factor = 'Abs'
            color_scale = ['#ff7a3a', 'white']

        # Sorting
        if sort_by == "pChange (High to Low)":
            df = df.sort_values(by="pChange", ascending=False)
        elif sort_by == "pChange (Low to High)":
            df = df.sort_values(by="pChange", ascending=True)
        elif sort_by == "ffmc (High to Low)":
            df = df.sort_values(by="ffmc", ascending=False)
        elif sort_by == "ffmc (Low to High)":
            df = df.sort_values(by="ffmc", ascending=True)

        # Treemap
        fig = px.treemap(
            df,
            path=['sector', 'symbol'],
            values=slice_factor,
            color='pChange',
            color_continuous_scale=color_scale,
            custom_data=['pChange']
        )
        fig.update_layout(margin=dict(t=30, l=0, r=0, b=0), height=900)
        st.plotly_chart(fig, use_container_width=True)

        # Download
        st.download_button("üì• Download Data as CSV", df.to_csv(index=False), "index_data.csv", "text/csv")
    else:
        st.warning("‚ö†Ô∏è Failed to fetch data for selected index.")

# ---------------------- MULTI INDEX MODE ----------------------
else:
    selected_indices = st.multiselect("Select up to 3 indices for comparison", index_list, default=["NIFTY 50", "NIFTY BANK"])
    slice_by = st.selectbox("Slice By", ["Market Cap", "Gainers", "Losers"], index=0)

    if selected_indices:
        cols = st.columns(len(selected_indices))
        for i, idx in enumerate(selected_indices):
            with cols[i]:
                st.subheader(idx)
                df = get_index_details(idx)
                if not df.empty:
                    sector_map = get_sector_data_yfinance(df['yf_symbol'].tolist())
                    df['sector'] = df['yf_symbol'].map(sector_map)
                    df.dropna(subset=['sector'], inplace=True)
                    df.drop('yf_symbol', axis=1, inplace=True)

                    if slice_by == 'Market Cap':
                        slice_factor = 'ffmc'
                        color_scale = px.colors.diverging.RdYlGn
                    elif slice_by == 'Gainers':
                        df = df[df["pChange"] > 0].copy()
                        slice_factor = 'pChange'
                        color_scale = ['white', '#a5eb79']
                    elif slice_by == 'Losers':
                        df = df[df["pChange"] < 0].copy()
                        df['Abs'] = df['pChange'].abs()
                        slice_factor = 'Abs'
                        color_scale = ['#ff7a3a', 'white']

                    fig = px.treemap(
                        df,
                        path=['sector', 'symbol'],
                        values=slice_factor,
                        color='pChange',
                        color_continuous_scale=color_scale,
                        custom_data=['pChange']
                    )
                    fig.update_layout(margin=dict(t=20, l=0, r=0, b=0), height=600)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.error(f"‚ö†Ô∏è No data for {idx}")

st.caption("Made with ‚ù§Ô∏è by YERRA SAI RAJESH")
